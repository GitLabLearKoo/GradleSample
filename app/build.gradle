apply plugin: 'com.android.application'

// 获取当前系统时间
static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

// 获取程序名称
static def getProductName(){
    return "gradlesample"
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"


    def currentVersionCode = getVersionCode()

    defaultConfig {
        applicationId "com.linkzhang.gradlesample"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode currentVersionCode
        versionName "1.0"
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "example"]//默认渠道
        flavorDimensions "default"
    }



    signingConfigs {
        debug {

        }

        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
        }

    }

    buildTypes {
        release {
            minifyEnabled true  //开启代码混淆
            zipAlignEnabled true
            shrinkResources true    // 移除无用的resource文件
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //修改生成的apk名字，格式为 app名_版本号_打包时间_渠道名_release.apk
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def channel = variant.getMergedFlavor().getManifestPlaceholders().get('UMENG_CHANNEL_VALUE');
                    if (variant.buildType.name == 'release') {
                        outputFileName = getProductName() + "_v${defaultConfig.versionName}_${releaseTime()}_" + channel + '_release.apk'
                    }
                }
            }
        }
    }



    getSigningProperties()
    //自动多渠道打包
    productFlavors {
        xiaomi {}
        _360 {}
        baidu {}
        wandoujia {}
        //...
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL: name]
    }
}


//读取签名配置文件
def getSigningProperties(){

    def propFile = file('signing.properties')
    if (propFile.canRead()){
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    }else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
}

// 读取版本号
def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()){
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        def runTasks = gradle.startParameter.taskNames
        if ('assembleRelease' in runTasks) {
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:27.1.1'
    compile 'com.android.support:design:27.1.1'
}
